<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project Management on [quandrei]</title>
    <link>https://quandrei.github.io/tags/project-management/</link>
    <description>Recent content in Project Management on [quandrei]</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Dec 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://quandrei.github.io/tags/project-management/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Grunt Master 6000</title>
      <link>https://quandrei.github.io/post/grunt-master-6000/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://quandrei.github.io/post/grunt-master-6000/</guid>
      <description>

&lt;p&gt;So, let&amp;rsquo;s start this off with a quote from my last post:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There were many obstacles from the very beginning, including architectural design decisions, unclear specifications and requirements, and limited developer resources and experience for the needed project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There I was, fairly new to a company, and asked to take the reigns of a project because of limited developer resources. Everyone else was committed to another project, and although I didn&amp;rsquo;t have the expertise to do this on my own, I was the only one around available for the the task at hand. Although, it should be noted that one of the other developers committed to another project, was around to give guidance, should I encounter any serious problems.&lt;/p&gt;

&lt;h3 id=&#34;challenge-the-first:7f507c410b3db05852baf4c5df177f11&#34;&gt;Challenge the first:&lt;/h3&gt;

&lt;p&gt;Our first big challenge was designing what the system should look like, based on the requirements that were somewhat ambiguous at the time. Furthermore, one of the desires of the system was for the user to have complete freedom in designing the geological constructs to store data. This meant, we would have no idea what a &amp;ldquo;something&amp;rdquo; would look like until the user created it, and what additional attributes it may have. There was talk of creating database tables as needed, for each new construct. Basically, the user would be a god in the system (or dog, I forget which). This would be problematic. How does one query a database when you have no idea what it looks like? Furthermore, how does a DBA maintain it? How would you adapt software to adapt to the ever-changing data-store?&lt;/p&gt;

&lt;p&gt;Our first conclusion was creating tables dynamically, for an unknown number of constructs, would be messy, and likely suicidal. There was a DB paradigm out there that we could possibly use, as a RDBMS didn&amp;rsquo;t seem ideal for our needs. It was &lt;a href=&#34;http://en.wikipedia.org/wiki/NoSQL&#34;&gt;No-SQL&lt;/a&gt;. We had focused a little on learning &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; and high hopes for using this, but alas, we had no in-house expertise, and the timeline for project completion didn&amp;rsquo;t leave much for gambling on something we knew little about. As an alternative, our database team suggested we use an &lt;a href=&#34;http://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model&#34;&gt;EAV&lt;/a&gt; database design pattern for storing dynamic data within a RDBMS. The only caveat would be we would need to limit the user from creating dynamic constructs, and give them pre-built ones, but general enough so they could design their own templates on top of our core. This was an accepted solution, so we moved forward.&lt;/p&gt;

&lt;h3 id=&#34;challenge-the-second:7f507c410b3db05852baf4c5df177f11&#34;&gt;Challenge the second:&lt;/h3&gt;

&lt;p&gt;Since another web product the company was committed to was already built using PHP and various Microsoft technologies (namely, IIS and SQL Server) due to client imposed restrictions, the trend was that we would develop this new web application with the same technologies.&lt;/p&gt;

&lt;p&gt;Using PHP, and the Microsoft colors of the rainbow is not particularly advantageous. They are technologies that do not compliment each other. And as a result, there is very little help and documentation out there in the event you hit a wall. Stick to a solution stack that works well together, like LAMP (Linux, Apache, MySQL, PHP) or if Microsoft is your preference, well ASP.NET would be preferable over PHP.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: Microsoft is not my preference for web application development and I could go on and on about why I hate developing in Windows at all, because it is giant pile of garbage, but I won&amp;rsquo;t do that here. Maybe some other time. I will say that I do love their debugger for C++ development and is matched by no one right now, at least to my knowledge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And finally, a client should not be dictating what your software solution stack is, but rather it should be transparent to them when delivering a fully realized software solution. But that is an argument for a another time.&lt;/p&gt;

&lt;h3 id=&#34;challenge-the-third:7f507c410b3db05852baf4c5df177f11&#34;&gt;Challenge the third:&lt;/h3&gt;

&lt;p&gt;Development resources were something that was lacking on this project. Others assisted where they could, but they were primarily assigned to other projects, and so much of the day-to-day coding was done by myself. Now the main issue with this, was that I am not a web developer by trade, however, due to the circumstances, I became one. I learned as much as I could, and did the best with the what skills I had and what I could learn from the only other web developer in the company. I learned a great deal, which is one of the pluses when thrown into a situation as this, but most days I felt like this. Also, I am certain that had there been more experienced web developers throughout the development of the project, certain steps could have been achieved more quickly.&lt;/p&gt;

&lt;p&gt;In the end, it turned out better than I had expected, but there is still much to be done in the next phases of QA, deployment, and maintenance.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>