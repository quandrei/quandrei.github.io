<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on [quandrei]</title>
    <link>https://quandrei.com/tags/python/</link>
    <description>Recent content in Python on [quandrei]</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 09 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://quandrei.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Godzilla Foxfire, the quickening</title>
      <link>https://quandrei.com/post/godzilla-foxfire-python/</link>
      <pubDate>Mon, 09 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://quandrei.com/post/godzilla-foxfire-python/</guid>
      <description>

&lt;p&gt;I started writing a trivial bookmarking app in &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; / &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt; for the main purpose of learning that stack. I must say that it was informative and fun.&lt;/p&gt;

&lt;h3 id=&#34;the-dizzying-highs:2ed8292b57c61dc391ddaa24e97c8149&#34;&gt;The dizzying highs:&lt;/h3&gt;

&lt;p&gt;Writing something in Python, with its simple and clean syntax, was satisfying. Little verbosity, and getting the logic I needed into classes and organized accordingly, was not a big hurdle.&lt;/p&gt;

&lt;p&gt;The microframework, Flask, did a good job of staying out of my way, and giving me what I needed when defining my routes. Unlike Django, which I had tried previously (with all its batteries included), I was able to get everything defined with a proper &lt;a href=&#34;http://www.restapitutorial.com/&#34;&gt;RESTful API&lt;/a&gt; in very little time.&lt;/p&gt;

&lt;p&gt;Implementing OATH (through some examples found online), turned out to be fairly straightforward. The only exception was integrating the app with &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt; (more on that later), since it isn&amp;rsquo;t your classic SQL DB.&lt;/p&gt;

&lt;h3 id=&#34;the-terrifying-lows:2ed8292b57c61dc391ddaa24e97c8149&#34;&gt;The terrifying lows:&lt;/h3&gt;

&lt;p&gt;Implementing OATH and other class definitions with MongoDB turned out to be the most challenging part, since most of the tutorials were using some flavor of SQL. I fully expected this, and to be honest, wanted the challenge so as to determine if I was actually learning something. The issues were mainly finding libraries I could use for MongoDB and then mapping the models using the No-SQL fields, in an appropriate/functional way. Through some reading, trial by fire, and testing, I was able to implement it successfully.&lt;/p&gt;

&lt;p&gt;Decorators still mystify me, and I confess I did not take the time to fully understand them. I am sure I am missing other core concepts. As a result, I don&amp;rsquo;t feel like I know Python/Flask confidently enough to dive into production code, but that usually comes with time (and more fire trials).&lt;/p&gt;

&lt;h3 id=&#34;the-creamy-middles:2ed8292b57c61dc391ddaa24e97c8149&#34;&gt;The creamy middles:&lt;/h3&gt;

&lt;p&gt;I am not certain if I will ever return to this specific stack, as I have found some other tools I prefer for developing web applications and microservices (enter &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;), but it was fun to prototype something with it, and get back to using MongoDB again.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>