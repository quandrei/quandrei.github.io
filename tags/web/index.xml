<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on [quandrei]</title>
    <link>https://quandrei.com/tags/web/</link>
    <description>Recent content in Web on [quandrei]</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 31 Jan 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://quandrei.com/tags/web/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Learn Me a Great Good</title>
      <link>https://quandrei.com/post/learn-me-a-great-good/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://quandrei.com/post/learn-me-a-great-good/</guid>
      <description>

&lt;h3 id=&#34;php-we-all-fall-down:55b9f93c2282d2c0f83dafeba6c98708&#34;&gt;PHP, we all fall down&lt;/h3&gt;

&lt;p&gt;So PHP has been getting me down lately, and I have been looking for the next new thing to get my mojo rising. Despite some improvements that came out of &lt;a href=&#34;http://php.net/archive/2016.php#id2016-05-26-1&#34;&gt;PHP7&lt;/a&gt; and dependency tools like &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;, there are a great many things that make day-to-day development, well, annoying. Among them, they include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an identity crisis, where it adopts the verbosity of Java in many of its bloated frameworks, but also retains its procedural style from its C-like hay day&lt;/li&gt;
&lt;li&gt;a lack of types, causing unpredictability and a debugging nightmare&lt;/li&gt;
&lt;li&gt;natural assumptions regarding built in functions seem to take a holiday&lt;/li&gt;
&lt;li&gt;the fact that its used considerably on the web, and everybody&amp;rsquo;s cousin is learning just enough to be dangerous, I often encounter terrible code I have the pleasure of supporting/maintaining&lt;/li&gt;
&lt;li&gt;Wordpress and Drupal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If &amp;ldquo;Why PHP sucks&amp;rdquo; is a topic that interests you, some fair points can be found &lt;a href=&#34;http://webonastick.com/php.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://whydoesitsuck.com/why-does-php-suck/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;so-what-next:55b9f93c2282d2c0f83dafeba6c98708&#34;&gt;So what next?&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve tried a few things over the past few months that may have some promise:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/&#34;&gt;Ruby&lt;/a&gt; / &lt;a href=&#34;https://www.ruby-lang.org/en/&#34;&gt;Rails&lt;/a&gt;&lt;/strong&gt; - easy to get a web app up and running. Although, I need to learn more about how the underpinnings work, since the automagically generating everything doesn&amp;rsquo;t sit well with me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; / &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt;&lt;/strong&gt; - simple/clean syntax, and the flexibility of being a general purpose language, has made learning python a great asset to my toolset.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;&lt;/strong&gt; - the most interesting option so far, as it has numerous features that appeal to me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;statically typed, compiled language&lt;/li&gt;
&lt;li&gt;concise/clean&lt;/li&gt;
&lt;li&gt;concurrency baked-in&lt;/li&gt;
&lt;li&gt;comprehensive standard library (without the need for additional tools to get things done)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Over the next few months, I will be working with Go quite a bit (it being one of the core development languages at my new digs) and am really excited to get more proficient with it. Hopefully, a quote I heard a number of years ago, doesn&amp;rsquo;t ring true:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Never fall in love with a language. It will always break your heart.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Migration</title>
      <link>https://quandrei.com/post/hugo-migration/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://quandrei.com/post/hugo-migration/</guid>
      <description>

&lt;p&gt;In my endeavor to not be bored, and learn new things, I decided to take a step in a new direction, and move my existing &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; blog to &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;why-hugo:ed8b63f31f6583b3537dd16634107c12&#34;&gt;Why hugo?&lt;/h3&gt;

&lt;p&gt;There seem to be some obvious advantages out there for using Hugo over Jekyll, but the following reasons are what sold me on the idea:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an excuse to learn me a great good; specifically get started on &lt;a href=&#34;https://golang.org/&#34;&gt;go-lang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;KISS&lt;/a&gt; principle&lt;/li&gt;
&lt;li&gt;performance boost from Jekyll (there are numerous articles out there, take your pick)&lt;/li&gt;
&lt;li&gt;taxonomy implememtation was dead-simple with a decent theme (lacking in my previous blog version)&lt;/li&gt;
&lt;li&gt;easy migration from &lt;a href=&#34;https://gohugo.io/tutorials/migrate-from-jekyll/&#34;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;easily hosted on &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;github pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--watch&lt;/code&gt; and &lt;code&gt;--theme=theme_name&lt;/code&gt; options when running locally, which are incredibly useful for dynamically observing changes to the site, and testing/vetting out themes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;searching-for-a-theme:ed8b63f31f6583b3537dd16634107c12&#34;&gt;Searching for a theme:&lt;/h3&gt;

&lt;p&gt;There were a few interesting themes I was debating on, and here were a few of the front-runners:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://themes.gohugo.io/lanyon/&#34;&gt;lanyon-hugo&lt;/a&gt;: I felt like I needed something different than my old blog, so this was out&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://themes.gohugo.io/casper/&#34;&gt;casper&lt;/a&gt;: was not too keen on the menu layout and the blog rendering, and no categories&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://themes.gohugo.io/detox/&#34;&gt;detox&lt;/a&gt;: no tag filtering for blog posts, no categories&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://themes.gohugo.io/startbootstrap-clean-blog/&#34;&gt;startbootstrap-clean-blog&lt;/a&gt;: too many errors to count, didn&amp;rsquo;t work out of the box&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://themes.gohugo.io/purehugo/&#34;&gt;purehugo&lt;/a&gt;: this was a close second, but there was little documentation for setting defaults for things like social networks, and I did not like the fact that the entire blog post is output on the posts page (should be a partial preview imho)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I am not the type to waste time wrangling HTML/CSS, and wanted to get something ported quickly, I finally decided on &lt;a href=&#34;http://themes.gohugo.io/redlounge/&#34;&gt;redlounge&lt;/a&gt;. The reasons being as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;simple and clean&lt;/li&gt;
&lt;li&gt;mobile/tablet friendly&lt;/li&gt;
&lt;li&gt;easily implement taxonomies (like tags/categories)&lt;/li&gt;
&lt;li&gt;easily have access to social media, both for linking to my personal accounts, and for sharing links on posts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only thing I do not like is the preview of the blog posts lacks formatting. Not a deal breaker though.&lt;/p&gt;

&lt;h3 id=&#34;porting-to-hugo:ed8b63f31f6583b3537dd16634107c12&#34;&gt;Porting to Hugo&lt;/h3&gt;

&lt;p&gt;The migration tool provided by Hugo did most of the heavy lifting. It was literally as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo import jekyll src_folder_of_jekyll_blog dest_folder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After I cleaned out a few folders I didn&amp;rsquo;t need (see &lt;a href=&#34;https://gohugo.io/overview/source-directory/&#34;&gt;Hugo folder structure&lt;/a&gt; for guidance), I just &lt;code&gt;git cloned&lt;/code&gt; a few themes in the &lt;em&gt;&lt;code&gt;dest_folder/themes&lt;/code&gt;&lt;/em&gt; and then ran the following to test/vet changes/themes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo serve -w --theme=theme_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most time-consuming part was actually doing some light editing on the existing blog posts I already had. I just changed the &lt;a href=&#34;https://gohugo.io/content/front-matter/&#34;&gt;front-matter&lt;/a&gt; section on blog posts to make it compliant with &lt;code&gt;.toml&lt;/code&gt; structure, looked through my changes to make certain everything looked good, and I was set to start on deploying.&lt;/p&gt;

&lt;p&gt;For deployment, there are quite a few tutorials out there, if you just look for them, but the &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/#hosting-personal-organization-pages:fcefb200141ace3e7bfd6542457b7a72&#34;&gt;Hugo documentation&lt;/a&gt; that I followed pretty much sums up what you need to do.&lt;/p&gt;

&lt;h3 id=&#34;issues:ed8b63f31f6583b3537dd16634107c12&#34;&gt;Issues:&lt;/h3&gt;

&lt;p&gt;The only issue I ran into was the CSS not rendering properly after deployment. This was not specifically due to Hugo actually, but because of the fact that I force using &lt;code&gt;https&lt;/code&gt; on my site, through &lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Cloudflare&lt;/a&gt;, and use an SSL certificate setup through their panel. The Hugo documentation specifies using your github organization URL as your base URL in your config settings (i.e. &lt;code&gt;username.github.io&lt;/code&gt;). So, when serving up the CSS, the browser displays a message saying the CSS content is not secure, and will not serve up mixed content (unless the end user allows it). All that was needed was changing my base URL in my config to &lt;code&gt;quandrei.com&lt;/code&gt; and I was good to go.&lt;/p&gt;

&lt;h3 id=&#34;final-thoughts:ed8b63f31f6583b3537dd16634107c12&#34;&gt;Final thoughts:&lt;/h3&gt;

&lt;p&gt;I am happy with the end result. Nice looking/improved site, easy management through git/github, performance-centric. No regrets.&lt;/p&gt;

&lt;p&gt;Now if I can only figure out how to get it to write Magento code&amp;hellip; and do my laundry&amp;hellip; I&amp;rsquo;d be set.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I am bored...</title>
      <link>https://quandrei.com/post/boredom/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://quandrei.com/post/boredom/</guid>
      <description>&lt;p&gt;So I have been extraordinarily busy with work these past few months, and haven&amp;rsquo;t had very much time for side projects, and interesting things that I&amp;rsquo;ve wanted to devote some time to. I&amp;rsquo;ve also been getting pretty bored with the work I am doing, something very dangerous in my profession, since this usually leads to the itch for new surroundings. This is a fairly engaging read on how to combat boredom for employees: &lt;a href=&#34;http://randsinrepose.com/archives/bored-people-quit/&#34;&gt;Bored People Quit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In an effort to combat my boredom, I have been devoting time to learning a few new things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://progrium.viewdocs.io/dokku/&#34;&gt;Dokku&lt;/a&gt; - PAAS (mini-Heroku) I deployed to my VPS to host everything&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; / &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt; - python microframework used to create a web app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; / &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; - golang site generator to provide info on various projects&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;Swift&lt;/a&gt; - iOS app to interface with the web app API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will update here, once more of these developments have materialized.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[End Transmission]&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento is as Magento does</title>
      <link>https://quandrei.com/post/magento/</link>
      <pubDate>Tue, 24 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://quandrei.com/post/magento/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been working as a &lt;a href=&#34;http://magento.com/&#34;&gt;Magento&lt;/a&gt; developer for a little over a year and a half, and I have come to one inescapable conclusion; I am not enjoying this.&lt;/p&gt;

&lt;p&gt;Have you ever heard the expression:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Stupid is as stupid does&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, by that same token, I think that the following expression is an apt decription of Magento:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Magento is as Magento does&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a more full explanation of the underlying expression, see &lt;a href=&#34;http://answers.google.com/answers/threadview?id=392986&#34;&gt;this&lt;/a&gt; (you can ignore all the preachy comments, and stick to the first answer given). But basically, this boils down to judging people or things by what they do, and not by how they appear.&lt;/p&gt;

&lt;h3 id=&#34;the-dizzying-highs:6975f8b398b6ca097f7264381802b6f4&#34;&gt;The dizzying highs:&lt;/h3&gt;

&lt;p&gt;Magento &lt;em&gt;appears&lt;/em&gt; to be a very shiny e-commerce solution. And in some respects it is. It provides a great degree of flexibility for those that want an e-commerce store, and has proven itself in the marketplace as a vetted solution.&lt;/p&gt;

&lt;p&gt;It provides a clean approach to create custom modules for new functionality, allowing for compartmentalizing code, and also provides mechanisms for injecting code in the execution process through minimal intrusion using event observers.&lt;/p&gt;

&lt;p&gt;These are all great things, however&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;the-terrifying-lows:6975f8b398b6ca097f7264381802b6f4&#34;&gt;The terrifying lows:&lt;/h3&gt;

&lt;p&gt;To achieve this level of flexibility, it has made some design decisions (one being an &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model&#34;&gt;EAV&lt;/a&gt; database schema design), which in turn sacrifices performance and scalability. To combat this issue, boosting performance is achieved through various caching techniques, but in my opinion is a hack at best, and a better solution should be sought out instead of applying a patching approach. Due to these performance issues, daily development can get slow and time consuming.&lt;/p&gt;

&lt;p&gt;The monolithic codebase is often difficult to navigate, and coupled with many different developers who have worked on this over a decade, and many having different approaches/visions to solving the same problem, often has led me in circles when trying to determine the best solution to a problem I am facing.&lt;/p&gt;

&lt;p&gt;A very picky naming convention for files/classes/modules/XML data can be frustrating at first, since often times, no errors are reported and fails silently, causing you to scratch your head wondering what went wrong.&lt;/p&gt;

&lt;h3 id=&#34;the-creamy-middles:6975f8b398b6ca097f7264381802b6f4&#34;&gt;The creamy middles:&lt;/h3&gt;

&lt;p&gt;Fortunately, a new hope has appeared in the form of Magento 2, and coupled with the release of PHP 7, should at the very least be intersting. Hopefully, this will help in resolving some of the annoyances in working with the platform on a daily basis (although XML files seem to have tripled&amp;hellip; ugh). From my limited knowledge of the release, some database architecture changes have been made to improve on performance. Personally, I would have liked to see something like &lt;a href=&#34;http://www.postgresql.org/docs/current/static/hstore.html&#34;&gt;PostgreSQL and the hstore&lt;/a&gt; column applied. With that approach, you would get the relational database components where needed, and the hstore column (similar to a document store applied in NoSQL) used where the dynamic nature of EAV is needed.&lt;/p&gt;

&lt;p&gt;Time will tell if this release will redeem Magento in my eyes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learn me a PHP for great good: Laravel 4</title>
      <link>https://quandrei.com/post/laravel4/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://quandrei.com/post/laravel4/</guid>
      <description>

&lt;p&gt;About 8 months ago, I was put on a new project at work. It was a bit of a departure, as I was originally working on an an existing C++/Qt codebase, with other developers who knew the product and could help should I run into any road blocks. This new project, was essentially, to design and implement a brand new web application to store and view primary geo-technical data.&lt;/p&gt;

&lt;p&gt;There were many obstacles from the very beginning, including architectural design decisions, unclear specifications and requirements, and limited developer resources and experience for the needed project. Those issues will be the subject of a later post. RIght now, I will just write about my experience with the framework and architecture decision we made.&lt;/p&gt;

&lt;h3 id=&#34;laravel-4-http-laravel-com:d9086dbed090496934deaef636486657&#34;&gt;&lt;a href=&#34;http://laravel.com/&#34;&gt;Laravel 4:&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Basically, it is a PHP framework that uses an &lt;a href=&#34;http://en.wikipedia.org/wiki/Object-relational_mapping&#34;&gt;ORM&lt;/a&gt; implementation (referred to as &lt;a href=&#34;http://laravel.com/docs/eloquent&#34;&gt;Eloquent ORM&lt;/a&gt; in their documentation). It is somewhat reminiscent to Rails for Ruby. It works with various databases, including MySQL, Postgres, SQLite, and SQL Server. Dependencies and packages can be managed with &lt;a href=&#34;http://getcomposer.org/&#34;&gt;composer&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;the-dizzying-highs:d9086dbed090496934deaef636486657&#34;&gt;The dizzying highs:&lt;/h3&gt;

&lt;p&gt;Development speed: Once our database schema was established, creating models and defining their relations was exceptionally quick and straightforward. There were very limited resources on this project (mostly it was me doing about 75% of the coding), but was still able to get a fully functional system in a few months.&lt;/p&gt;

&lt;p&gt;RESTful routing: One of the aims of the web application was to make it RESTful, and setting up the &lt;a href=&#34;http://laravel.com/docs/routing&#34;&gt;routing with Laravel 4&lt;/a&gt; was simple, and had enough features to handle more complex requests.&lt;/p&gt;

&lt;p&gt;MVC: Through the &lt;a href=&#34;https://github.com/JeffreyWay/Laravel-4-Generators&#34;&gt;Jeffrey Way Laravel 4 Generators&lt;/a&gt;, coding a model-view-controller web application became a lot quicker.&lt;/p&gt;

&lt;h3 id=&#34;the-terrifying-lows:d9086dbed090496934deaef636486657&#34;&gt;The terrifying lows:&lt;/h3&gt;

&lt;p&gt;Magic unicorn sprinkles: With all the bells and whistles of Laravel 4, which speed up development time, there is a lot going on in the background, handling things for you, most of which you may not be aware of. This might be handy in a pinch, but this will eventually result in you hitting a wall when there is a bug, that you cannot immediately resolve because you do not fully understand what is going on under the hood.&lt;/p&gt;

&lt;p&gt;One issue I encountered was naming of certain functions, classes, or tables, must follow a specific convention in order to work within the web application.&lt;/p&gt;

&lt;p&gt;One example is camelCase must be used to define specific relational functions. I had made the mistake of using snake_case in the function definition of a many-to-many relationship (due to some older Laravel documantation where snake_case was the standard prior to Laravel 4), and the result was a rather bizarre and uninformative error. After much digging on StackOverflow, I found the resolution.&lt;/p&gt;

&lt;p&gt;Another example of naming causing a problem, is that it is assumed that all &amp;lsquo;Model&amp;rsquo; classes are named in the singular tense, and the table that stores those instantiations of the model, in the plural tense. Often, this may work fine, however, there were a few situation where this did not make sense for my web application. This caused an issue, as my table schema didn&amp;rsquo;t follow this convention, and when trying to save a model instantiation, it would throw an error. The fix was simple (as you can specify a different table name in your model class), but again, something that may not be obvious to the new-comer.&lt;/p&gt;

&lt;h3 id=&#34;the-creamy-middles:d9086dbed090496934deaef636486657&#34;&gt;The creamy middles:&lt;/h3&gt;

&lt;p&gt;All in all, I found this a pretty good framework to work with, and handles the ActiveRecord paradigm competently. I am sure I will be facing some magic unicorn dust in the near future, but the key will be understanding the underpinnings to handle any tailspins and &lt;a href=&#34;http://tinyurl.com/lpfef3n&#34;&gt;barrel rolls&lt;/a&gt;. I am still discovering new features everyday, and some neat things to optimize my web application. And the adventure continues, as I step into the QA testing and subsequent maintenance phases of this development project. My hope is that, time permitting, I can start implementing unit tests and continuous integration in phase 2. Until then, keep looking to the stars!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>